package main

import (
	"bytes"
	"go/format"
	"log"
	"os"
	"sort"
	"text/template"
)

func main() {
	jsonRules := getJSONRules()
	extraRules := getExtraRules()

	rules := append(jsonRules, extraRules...)

	for _, r := range rules {
		sort.Strings(r.Languages)
	}

	sort.Slice(rules, func(i, j int) bool {
		if a, b := rules[i].Count, rules[j].Count; a != b {
			return a < b
		}

		return rules[i].Name() < rules[j].Name()
	})

	executeAndSafe("../builtin_gen.go", codeTemplate, rules)
}

// executeAndSafe applies the DataSet's to a parsed template and saves the result correctly
// formatted in a file 'name'.
func executeAndSafe(name string, tmpl *template.Template, rules []*RuleData) {
	var buf bytes.Buffer
	err := tmpl.Execute(&buf, rules)
	checkError(err)

	p, err := format.Source(buf.Bytes())
	checkError(err)

	file, err := os.OpenFile(name, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	checkError(err)
	defer file.Close()

	_, err = file.Write(p)
	checkError(err)
}

func checkError(err error) {
	if err != nil {
		log.Fatalf("Error: %s\n", err)
	}
}

var codeTemplate = template.Must(template.New("rule").Parse(`// This file is generated by poplural/generator/generate.sh; DO NOT EDIT
package poplural

func init() {
{{range $idx, $rule := .}}
	{{- if $rule.Languages -}}
	registerLanguageForm({{printf "%#v" $rule.Languages}}, 
		"{{$rule.CompiledRaw}}", &Form{
		NPlurals: {{$rule.Count}},
		// {{$rule.Raw}}
		FormFunc: func(n int64) int {
			{{$rule.Compiled}}
		},
	})
	{{else}}
	registerRawForm("{{$rule.CompiledRaw}}", &Form{
		NPlurals: {{$rule.Count}},
		// {{$rule.Raw}}
		FormFunc: func(n int64) int {
			{{$rule.Compiled}}
		},
	})
	{{end}}
{{end}}
}
`))
