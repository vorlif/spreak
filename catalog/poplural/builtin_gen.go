// This file is generated by poplural/generator/main.go; DO NOT EDIT
package poplural

func getBuiltInForRawRule(rawRule string) *Rule {
	switch rawRule {
	case "nplurals=1; plural=0;":
		return newRuleBmBoDzHnjIdIgIiJaJboJvKdeKeaKmKoLktLoMsMyNqoOsaSahSesSgSuThToTpiViWoYoYueZhZh_HansZh_Hant()
	case "nplurals=2; plural=n != 1;":
		return newRuleAfAnAsaAstAzBalBemBezBgBrxCeCggChrCkbDaDeDe_ATDe_CHDvEeElEnEn_AUEn_CAEn_GBEn_USEoEtEuFiFoFurFyGlGswHaHawHuIaIoJgoJmcKaKajKcgKkKkjKlKsKsbKuKyLbLgLijMasMgoMlMnMrNahNbNdNeNlNl_BENnNnhNoNrNyNynOmOrOsPapPsRmRofRwkSaqScSdSdhSehSnSoSqSsSsyStSvSwSw_CDSyrTaTeTeoTigTkTnTrTsUgUrUzVeVoVunWaeXhXogYi()
	case "nplurals=2; plural=n > 1;":
		return newRuleAkAmAsBhoBnCswDoiFaFa_AFFfGuGuwHiHi_LatnHyKabKnLnMgNsoPaPcmSiTiWaZu()
	case "nplurals=2; plural=n != 1 && n != 2 && n != 3 && ((n % 10 == 4 || n % 10 == 6) || n % 10 == 9);":
		return newRuleCebFilTl()
	case "nplurals=2; plural=(n % 10 != 1 || n % 100 == 11);":
		return newRuleIsMk()
	case "nplurals=2; plural=n >= 2 && (n < 11 || n > 99);":
		return newRuleTzm()
	case "nplurals=2; plural=(((n == 1 || n == 2) || n == 3) || n % 10 != 4 && n % 10 != 6 && n % 10 != 9);":
		return &Rule{
			NPlurals: 2,
			// nplurals=2; plural=((n == 1 || (n == 2 || n == 3)) || n % 10 != 4 && n % 10 != 6 && n % 10 != 9);
			FormFunc: func(n int64) int {
				if ((n == 1 || n == 2) || n == 3) || n%10 != 4 && n%10 != 6 && n%10 != 9 {
					return 1
				}
				return 0
			},
		}
	case "nplurals=2; plural=(n <= 1 || n >= 11 && n <= 99);":
		return &Rule{
			NPlurals: 2,
			// nplurals=2; plural=(n <= 1 || n >= 11 && n <= 99);
			FormFunc: func(n int64) int {
				if n <= 1 || n >= 11 && n <= 99 {
					return 1
				}
				return 0
			},
		}
	case "nplurals=2; plural=(n == 0 || n == 1);":
		return &Rule{
			NPlurals: 2,
			// nplurals=2; plural=(n == 0 || n == 1);
			FormFunc: func(n int64) int {
				if n == 0 || n == 1 {
					return 1
				}
				return 0
			},
		}
	case "nplurals=2; plural=n % 10 == 1 && n % 100 != 11;":
		return &Rule{
			NPlurals: 2,
			// nplurals=2; plural=n % 10 == 1 && n % 100 != 11;
			FormFunc: func(n int64) int {
				if n%10 == 1 && n%100 != 11 {
					return 1
				}
				return 0
			},
		}
	case "nplurals=3; plural=(n % 10 == 1 && n % 100 != 11) ? 0 : ((n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14)) ? 1 : 2);":
		return newRuleBeBsHrRuShSrSr_MEUk()
	case "nplurals=3; plural=(n == 0) ? 0 : ((n == 1) ? 1 : 2);":
		return newRuleBloKshLag()
	case "nplurals=3; plural=(n == 1) ? 0 : ((n != 0 && n % 1000000 == 0) ? 1 : 2);":
		return newRuleCaEsEs_419Es_ESEs_MXItLldPt_PTScnVec()
	case "nplurals=3; plural=(n == 1) ? 0 : ((n >= 2 && n <= 4) ? 1 : 2);":
		return newRuleCsSk()
	case "nplurals=3; plural=(n == 0 || n == 1) ? 0 : ((n != 0 && n % 1000000 == 0) ? 1 : 2);":
		return newRuleFrFr_CAFr_CHPtPt_BR()
	case "nplurals=3; plural=(n == 1) ? 0 : ((n == 2) ? 1 : 2);":
		return newRuleHeIuNaqSatSeSmaSmiSmjSmnSms()
	case "nplurals=3; plural=(n % 10 == 1 && (n % 100 < 11 || n % 100 > 19)) ? 0 : ((n % 10 >= 2 && n % 10 <= 9 && (n % 100 < 11 || n % 100 > 19)) ? 1 : 2);":
		return newRuleLt()
	case "nplurals=3; plural=(n % 10 == 0 || n % 100 >= 11 && n % 100 <= 19) ? 0 : ((n % 10 == 1 && n % 100 != 11) ? 1 : 2);":
		return newRuleLvPrg()
	case "nplurals=3; plural=(n == 1) ? 0 : ((n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14)) ? 1 : 2);":
		return newRulePl()
	case "nplurals=3; plural=(n == 1) ? 0 : ((n == 0 || n != 1 && n % 100 >= 1 && n % 100 <= 19) ? 1 : 2);":
		return newRuleRoRo_MD()
	case "nplurals=3; plural=(n == 0 || n == 1) ? 0 : ((n >= 2 && n <= 10) ? 1 : 2);":
		return newRuleShi()
	case "nplurals=3; plural=(n == 0) ? 0 : (((n == 0 || n == 1) && n != 0) ? 1 : 2);":
		return &Rule{
			NPlurals: 3,
			// nplurals=3; plural=n == 0 ? 0 : (n == 0 || n == 1) && n != 0 ? 1 : 2;
			FormFunc: func(n int64) int {
				if n == 0 {
					return 0
				}
				if (n == 0 || n == 1) && n != 0 {
					return 1
				}
				return 2
			},
		}
	case "nplurals=4; plural=(n % 100 == 1) ? 0 : ((n % 100 == 2) ? 1 : ((n % 100 == 3 || n % 100 == 4) ? 2 : 3));":
		return newRuleDsbHsbSl()
	case "nplurals=4; plural=(n == 1 || n == 11) ? 0 : ((n == 2 || n == 12) ? 1 : ((n >= 3 && n <= 10 || n >= 13 && n <= 19) ? 2 : 3));":
		return newRuleGd()
	case "nplurals=4; plural=(n % 10 == 1) ? 0 : ((n % 10 == 2) ? 1 : (((n % 100 == 0 || (n % 100 == 20 || (n % 100 == 40 || n % 100 == 60))) || n % 100 == 80) ? 2 : 3));":
		return newRuleGv()
	case "nplurals=4; plural=(n % 100 == 1) ? 0 : ((n % 100 == 2) ? 1 : ((n % 100 >= 3 && n % 100 <= 4) ? 2 : 3));":
		return &Rule{
			NPlurals: 4,
			// nplurals=4; plural=n % 100 == 1 ? 0 : n % 100 == 2 ? 1 : n % 100 >= 3 && n % 100 <= 4 ? 2 : 3;
			FormFunc: func(n int64) int {
				if n%100 == 1 {
					return 0
				}
				if n%100 == 2 {
					return 1
				}
				if n%100 >= 3 && n%100 <= 4 {
					return 2
				}
				return 3
			},
		}
	case "nplurals=5; plural=(n % 10 == 1 && n % 100 != 11 && n % 100 != 71 && n % 100 != 91) ? 0 : ((n % 10 == 2 && n % 100 != 12 && n % 100 != 72 && n % 100 != 92) ? 1 : (((n % 10 == 3 || n % 10 == 4) || n % 10 == 9) && (n % 100 < 10 || n % 100 > 19) && (n % 100 < 70 || n % 100 > 79) && (n % 100 < 90 || n % 100 > 99) ? 2 : ((n != 0 && n % 1000000 == 0) ? 3 : 4)));":
		return newRuleBr()
	case "nplurals=5; plural=(n == 1) ? 0 : ((n == 2) ? 1 : ((n >= 3 && n <= 6) ? 2 : ((n >= 7 && n <= 10) ? 3 : 4)));":
		return newRuleGa()
	case "nplurals=5; plural=(n == 1) ? 0 : ((n == 2) ? 1 : ((n == 0 || n % 100 >= 3 && n % 100 <= 10) ? 2 : ((n % 100 >= 11 && n % 100 <= 19) ? 3 : 4)));":
		return newRuleMt()
	case "nplurals=5; plural=(n % 10 == 1 && n % 100 != 11 && n % 100 != 71 && n % 100 != 91) ? 0 : ((n % 10 == 2 && n % 100 != 12 && n % 100 != 72 && n % 100 != 92) ? 1 : ((n % 10 >= 3 && n % 10 <= 4 || n % 10 == 9) && (n % 100 < 10 || n % 100 > 19) && (n % 100 < 70 || n % 100 > 79) && (n % 100 < 90 || n % 100 > 99) ? 2 : ((n != 0 && n % 1000000 == 0) ? 3 : 4)));":
		return &Rule{
			NPlurals: 5,
			// nplurals=5; plural=n % 10 == 1 && n % 100 != 11 && n % 100 != 71 && n % 100 != 91 ? 0 : n % 10 == 2 && n % 100 != 12 && n % 100 != 72 && n % 100 != 92 ? 1 : (n % 10 >= 3 && n % 10 <= 4 || n % 10 == 9) && (n % 100 < 10 || n % 100 > 19) && (n % 100 < 70 || n % 100 > 79) && (n % 100 < 90 || n % 100 > 99) ? 2 : n != 0 && n % 1000000 == 0 ? 3 : 4;
			FormFunc: func(n int64) int {
				if n%10 == 1 && n%100 != 11 && n%100 != 71 && n%100 != 91 {
					return 0
				}
				if n%10 == 2 && n%100 != 12 && n%100 != 72 && n%100 != 92 {
					return 1
				}
				if (n%10 >= 3 && n%10 <= 4 || n%10 == 9) && (n%100 < 10 || n%100 > 19) && (n%100 < 70 || n%100 > 79) && (n%100 < 90 || n%100 > 99) {
					return 2
				}
				if n != 0 && n%1000000 == 0 {
					return 3
				}
				return 4
			},
		}
	case "nplurals=6; plural=(n == 0) ? 0 : ((n == 1) ? 1 : ((n == 2) ? 2 : ((n % 100 >= 3 && n % 100 <= 10) ? 3 : ((n % 100 >= 11 && n % 100 <= 99) ? 4 : 5))));":
		return newRuleArAr_001Ars()
	case "nplurals=6; plural=(n == 0) ? 0 : ((n == 1) ? 1 : ((n == 2) ? 2 : ((n == 3) ? 3 : ((n == 6) ? 4 : 5))));":
		return newRuleCy()
	case "nplurals=6; plural=(n == 0) ? 0 : ((n == 1) ? 1 : (((((n % 100 == 2 || (n % 100 == 22 || (n % 100 == 42 || n % 100 == 62))) || n % 100 == 82) || n % 1000 == 0 && ((n % 100000 >= 1000 && n % 100000 <= 20000 || (n % 100000 == 40000 || n % 100000 == 60000)) || n % 100000 == 80000)) || n != 0 && n % 1000000 == 100000) ? 2 : (((n % 100 == 3 || (n % 100 == 23 || (n % 100 == 43 || n % 100 == 63))) || n % 100 == 83) ? 3 : ((n != 1 && ((n % 100 == 1 || (n % 100 == 21 || (n % 100 == 41 || n % 100 == 61))) || n % 100 == 81)) ? 4 : 5))));":
		return newRuleKw()
	default:
		return nil
	}
}

func getBuiltInForLanguage(lang string) *Rule {
	switch lang {
	case "bm", "bo", "dz", "hnj", "id", "ig", "ii", "ja", "jbo", "jv", "kde", "kea", "km", "ko", "lkt", "lo", "ms", "my", "nqo", "osa", "sah", "ses", "sg", "su", "th", "to", "tpi", "vi", "wo", "yo", "yue", "zh", "zh-Hans", "zh-Hant", "zh_Hans", "zh_Hant":
		return newRuleBmBoDzHnjIdIgIiJaJboJvKdeKeaKmKoLktLoMsMyNqoOsaSahSesSgSuThToTpiViWoYoYueZhZh_HansZh_Hant()
	case "af", "an", "asa", "ast", "az", "bal", "bem", "bez", "bg", "brx", "ce", "cgg", "chr", "ckb", "da", "de", "de-AT", "de-CH", "de_AT", "de_CH", "dv", "ee", "el", "en", "en-AU", "en-CA", "en-GB", "en-US", "en_AU", "en_CA", "en_GB", "en_US", "eo", "et", "eu", "fi", "fo", "fur", "fy", "gl", "gsw", "ha", "haw", "hu", "ia", "io", "jgo", "jmc", "ka", "kaj", "kcg", "kk", "kkj", "kl", "ks", "ksb", "ku", "ky", "lb", "lg", "lij", "mas", "mgo", "ml", "mn", "mr", "nah", "nb", "nd", "ne", "nl", "nl-BE", "nl_BE", "nn", "nnh", "no", "nr", "ny", "nyn", "om", "or", "os", "pap", "ps", "rm", "rof", "rwk", "saq", "sc", "sd", "sdh", "seh", "sn", "so", "sq", "ss", "ssy", "st", "sv", "sw", "sw-CD", "sw_CD", "syr", "ta", "te", "teo", "tig", "tk", "tn", "tr", "ts", "ug", "ur", "uz", "ve", "vo", "vun", "wae", "xh", "xog", "yi":
		return newRuleAfAnAsaAstAzBalBemBezBgBrxCeCggChrCkbDaDeDe_ATDe_CHDvEeElEnEn_AUEn_CAEn_GBEn_USEoEtEuFiFoFurFyGlGswHaHawHuIaIoJgoJmcKaKajKcgKkKkjKlKsKsbKuKyLbLgLijMasMgoMlMnMrNahNbNdNeNlNl_BENnNnhNoNrNyNynOmOrOsPapPsRmRofRwkSaqScSdSdhSehSnSoSqSsSsyStSvSwSw_CDSyrTaTeTeoTigTkTnTrTsUgUrUzVeVoVunWaeXhXogYi()
	case "ak", "am", "as", "bho", "bn", "csw", "doi", "fa", "fa-AF", "fa_AF", "ff", "gu", "guw", "hi", "hi-Latn", "hi_Latn", "hy", "kab", "kn", "ln", "mg", "nso", "pa", "pcm", "si", "ti", "wa", "zu":
		return newRuleAkAmAsBhoBnCswDoiFaFa_AFFfGuGuwHiHi_LatnHyKabKnLnMgNsoPaPcmSiTiWaZu()
	case "ceb", "fil", "tl":
		return newRuleCebFilTl()
	case "is", "mk":
		return newRuleIsMk()
	case "tzm":
		return newRuleTzm()
	case "be", "bs", "hr", "ru", "sh", "sr", "sr-Latn", "sr-ME", "sr_ME", "uk":
		return newRuleBeBsHrRuShSrSr_MEUk()
	case "blo", "ksh", "lag":
		return newRuleBloKshLag()
	case "ca", "es", "es-419", "es-ES", "es-MX", "es_419", "es_ES", "es_MX", "it", "lld", "pt-PT", "pt_PT", "scn", "vec":
		return newRuleCaEsEs_419Es_ESEs_MXItLldPt_PTScnVec()
	case "cs", "sk":
		return newRuleCsSk()
	case "fr", "fr-CA", "fr-CH", "fr_CA", "fr_CH", "pt", "pt-BR", "pt_BR":
		return newRuleFrFr_CAFr_CHPtPt_BR()
	case "he", "iu", "naq", "sat", "se", "sma", "smi", "smj", "smn", "sms":
		return newRuleHeIuNaqSatSeSmaSmiSmjSmnSms()
	case "lt":
		return newRuleLt()
	case "lv", "prg":
		return newRuleLvPrg()
	case "pl":
		return newRulePl()
	case "ro", "ro-MD", "ro_MD":
		return newRuleRoRo_MD()
	case "shi":
		return newRuleShi()
	case "dsb", "hsb", "sl":
		return newRuleDsbHsbSl()
	case "gd":
		return newRuleGd()
	case "gv":
		return newRuleGv()
	case "br":
		return newRuleBr()
	case "ga":
		return newRuleGa()
	case "mt":
		return newRuleMt()
	case "ar", "ar-001", "ar_001", "ars":
		return newRuleArAr_001Ars()
	case "cy":
		return newRuleCy()
	case "kw":
		return newRuleKw()
	default:
		return nil
	}
}

// [bm bo dz hnj id ig ii ja jbo jv kde kea km ko lkt lo ms my nqo osa sah ses sg su th to tpi vi wo yo yue zh zh_Hans zh_Hant]
func newRuleBmBoDzHnjIdIgIiJaJboJvKdeKeaKmKoLktLoMsMyNqoOsaSahSesSgSuThToTpiViWoYoYueZhZh_HansZh_Hant() *Rule {
	return &Rule{
		NPlurals: 1,
		// nplurals=1; plural=0;
		FormFunc: func(n int64) int {
			return 0
		},
	}
}

// [af an asa ast az bal bem bez bg brx ce cgg chr ckb da de de_AT de_CH dv ee el en en_AU en_CA en_GB en_US eo et eu fi fo fur fy gl gsw ha haw hu ia io jgo jmc ka kaj kcg kk kkj kl ks ksb ku ky lb lg lij mas mgo ml mn mr nah nb nd ne nl nl_BE nn nnh no nr ny nyn om or os pap ps rm rof rwk saq sc sd sdh seh sn so sq ss ssy st sv sw sw_CD syr ta te teo tig tk tn tr ts ug ur uz ve vo vun wae xh xog yi]
func newRuleAfAnAsaAstAzBalBemBezBgBrxCeCggChrCkbDaDeDe_ATDe_CHDvEeElEnEn_AUEn_CAEn_GBEn_USEoEtEuFiFoFurFyGlGswHaHawHuIaIoJgoJmcKaKajKcgKkKkjKlKsKsbKuKyLbLgLijMasMgoMlMnMrNahNbNdNeNlNl_BENnNnhNoNrNyNynOmOrOsPapPsRmRofRwkSaqScSdSdhSehSnSoSqSsSsyStSvSwSw_CDSyrTaTeTeoTigTkTnTrTsUgUrUzVeVoVunWaeXhXogYi() *Rule {
	return &Rule{
		NPlurals: 2,
		// nplurals=2; plural=n != 1;
		FormFunc: func(n int64) int {
			if n != 1 {
				return 1
			}
			return 0
		},
	}
}

// [ak am as bho bn csw doi fa fa_AF ff gu guw hi hi_Latn hy kab kn ln mg nso pa pcm si ti wa zu]
func newRuleAkAmAsBhoBnCswDoiFaFa_AFFfGuGuwHiHi_LatnHyKabKnLnMgNsoPaPcmSiTiWaZu() *Rule {
	return &Rule{
		NPlurals: 2,
		// nplurals=2; plural=n > 1;
		FormFunc: func(n int64) int {
			if n > 1 {
				return 1
			}
			return 0
		},
	}
}

// [ceb fil tl]
func newRuleCebFilTl() *Rule {
	return &Rule{
		NPlurals: 2,
		// nplurals=2; plural=n != 1 && n != 2 && n != 3 && (n % 10 == 4 || n % 10 == 6 || n % 10 == 9);
		FormFunc: func(n int64) int {
			if n != 1 && n != 2 && n != 3 && ((n%10 == 4 || n%10 == 6) || n%10 == 9) {
				return 1
			}
			return 0
		},
	}
}

// [is mk]
func newRuleIsMk() *Rule {
	return &Rule{
		NPlurals: 2,
		// nplurals=2; plural=n % 10 != 1 || n % 100 == 11;
		FormFunc: func(n int64) int {
			if n%10 != 1 || n%100 == 11 {
				return 1
			}
			return 0
		},
	}
}

// [tzm]
func newRuleTzm() *Rule {
	return &Rule{
		NPlurals: 2,
		// nplurals=2; plural=n >= 2 && (n < 11 || n > 99);
		FormFunc: func(n int64) int {
			if n >= 2 && (n < 11 || n > 99) {
				return 1
			}
			return 0
		},
	}
}

// [be bs hr ru sh sr sr_ME uk]
func newRuleBeBsHrRuShSrSr_MEUk() *Rule {
	return &Rule{
		NPlurals: 3,
		// nplurals=3; plural=(n % 10 == 1 && n % 100 != 11) ? 0 : ((n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14)) ? 1 : 2);
		FormFunc: func(n int64) int {
			if n%10 == 1 && n%100 != 11 {
				return 0
			}
			if n%10 >= 2 && n%10 <= 4 && (n%100 < 12 || n%100 > 14) {
				return 1
			}
			return 2
		},
	}
}

// [blo ksh lag]
func newRuleBloKshLag() *Rule {
	return &Rule{
		NPlurals: 3,
		// nplurals=3; plural=(n == 0) ? 0 : ((n == 1) ? 1 : 2);
		FormFunc: func(n int64) int {
			if n == 0 {
				return 0
			}
			if n == 1 {
				return 1
			}
			return 2
		},
	}
}

// [ca es es_419 es_ES es_MX it lld pt_PT scn vec]
func newRuleCaEsEs_419Es_ESEs_MXItLldPt_PTScnVec() *Rule {
	return &Rule{
		NPlurals: 3,
		// nplurals=3; plural=(n == 1) ? 0 : ((n != 0 && n % 1000000 == 0) ? 1 : 2);
		FormFunc: func(n int64) int {
			if n == 1 {
				return 0
			}
			if n != 0 && n%1000000 == 0 {
				return 1
			}
			return 2
		},
	}
}

// [cs sk]
func newRuleCsSk() *Rule {
	return &Rule{
		NPlurals: 3,
		// nplurals=3; plural=(n == 1) ? 0 : ((n >= 2 && n <= 4) ? 1 : 2);
		FormFunc: func(n int64) int {
			if n == 1 {
				return 0
			}
			if n >= 2 && n <= 4 {
				return 1
			}
			return 2
		},
	}
}

// [fr fr_CA fr_CH pt pt_BR]
func newRuleFrFr_CAFr_CHPtPt_BR() *Rule {
	return &Rule{
		NPlurals: 3,
		// nplurals=3; plural=(n == 0 || n == 1) ? 0 : ((n != 0 && n % 1000000 == 0) ? 1 : 2);
		FormFunc: func(n int64) int {
			if n == 0 || n == 1 {
				return 0
			}
			if n != 0 && n%1000000 == 0 {
				return 1
			}
			return 2
		},
	}
}

// [he iu naq sat se sma smi smj smn sms]
func newRuleHeIuNaqSatSeSmaSmiSmjSmnSms() *Rule {
	return &Rule{
		NPlurals: 3,
		// nplurals=3; plural=(n == 1) ? 0 : ((n == 2) ? 1 : 2);
		FormFunc: func(n int64) int {
			if n == 1 {
				return 0
			}
			if n == 2 {
				return 1
			}
			return 2
		},
	}
}

// [lt]
func newRuleLt() *Rule {
	return &Rule{
		NPlurals: 3,
		// nplurals=3; plural=(n % 10 == 1 && (n % 100 < 11 || n % 100 > 19)) ? 0 : ((n % 10 >= 2 && n % 10 <= 9 && (n % 100 < 11 || n % 100 > 19)) ? 1 : 2);
		FormFunc: func(n int64) int {
			if n%10 == 1 && (n%100 < 11 || n%100 > 19) {
				return 0
			}
			if n%10 >= 2 && n%10 <= 9 && (n%100 < 11 || n%100 > 19) {
				return 1
			}
			return 2
		},
	}
}

// [lv prg]
func newRuleLvPrg() *Rule {
	return &Rule{
		NPlurals: 3,
		// nplurals=3; plural=(n % 10 == 0 || n % 100 >= 11 && n % 100 <= 19) ? 0 : ((n % 10 == 1 && n % 100 != 11) ? 1 : 2);
		FormFunc: func(n int64) int {
			if n%10 == 0 || n%100 >= 11 && n%100 <= 19 {
				return 0
			}
			if n%10 == 1 && n%100 != 11 {
				return 1
			}
			return 2
		},
	}
}

// [pl]
func newRulePl() *Rule {
	return &Rule{
		NPlurals: 3,
		// nplurals=3; plural=(n == 1) ? 0 : ((n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14)) ? 1 : 2);
		FormFunc: func(n int64) int {
			if n == 1 {
				return 0
			}
			if n%10 >= 2 && n%10 <= 4 && (n%100 < 12 || n%100 > 14) {
				return 1
			}
			return 2
		},
	}
}

// [ro ro_MD]
func newRuleRoRo_MD() *Rule {
	return &Rule{
		NPlurals: 3,
		// nplurals=3; plural=(n == 1) ? 0 : ((n == 0 || n != 1 && n % 100 >= 1 && n % 100 <= 19) ? 1 : 2);
		FormFunc: func(n int64) int {
			if n == 1 {
				return 0
			}
			if n == 0 || n != 1 && n%100 >= 1 && n%100 <= 19 {
				return 1
			}
			return 2
		},
	}
}

// [shi]
func newRuleShi() *Rule {
	return &Rule{
		NPlurals: 3,
		// nplurals=3; plural=(n == 0 || n == 1) ? 0 : ((n >= 2 && n <= 10) ? 1 : 2);
		FormFunc: func(n int64) int {
			if n == 0 || n == 1 {
				return 0
			}
			if n >= 2 && n <= 10 {
				return 1
			}
			return 2
		},
	}
}

// [dsb hsb sl]
func newRuleDsbHsbSl() *Rule {
	return &Rule{
		NPlurals: 4,
		// nplurals=4; plural=(n % 100 == 1) ? 0 : ((n % 100 == 2) ? 1 : ((n % 100 == 3 || n % 100 == 4) ? 2 : 3));
		FormFunc: func(n int64) int {
			if n%100 == 1 {
				return 0
			}
			if n%100 == 2 {
				return 1
			}
			if n%100 == 3 || n%100 == 4 {
				return 2
			}
			return 3
		},
	}
}

// [gd]
func newRuleGd() *Rule {
	return &Rule{
		NPlurals: 4,
		// nplurals=4; plural=(n == 1 || n == 11) ? 0 : ((n == 2 || n == 12) ? 1 : ((n >= 3 && n <= 10 || n >= 13 && n <= 19) ? 2 : 3));
		FormFunc: func(n int64) int {
			if n == 1 || n == 11 {
				return 0
			}
			if n == 2 || n == 12 {
				return 1
			}
			if n >= 3 && n <= 10 || n >= 13 && n <= 19 {
				return 2
			}
			return 3
		},
	}
}

// [gv]
func newRuleGv() *Rule {
	return &Rule{
		NPlurals: 4,
		// nplurals=4; plural=(n % 10 == 1) ? 0 : ((n % 10 == 2) ? 1 : ((n % 100 == 0 || n % 100 == 20 || n % 100 == 40 || n % 100 == 60 || n % 100 == 80) ? 2 : 3));
		FormFunc: func(n int64) int {
			if n%10 == 1 {
				return 0
			}
			if n%10 == 2 {
				return 1
			}
			if (n%100 == 0 || (n%100 == 20 || (n%100 == 40 || n%100 == 60))) || n%100 == 80 {
				return 2
			}
			return 3
		},
	}
}

// [br]
func newRuleBr() *Rule {
	return &Rule{
		NPlurals: 5,
		// nplurals=5; plural=(n % 10 == 1 && n % 100 != 11 && n % 100 != 71 && n % 100 != 91) ? 0 : ((n % 10 == 2 && n % 100 != 12 && n % 100 != 72 && n % 100 != 92) ? 1 : ((((n % 10 == 3 || n % 10 == 4) || n % 10 == 9) && (n % 100 < 10 || n % 100 > 19) && (n % 100 < 70 || n % 100 > 79) && (n % 100 < 90 || n % 100 > 99)) ? 2 : ((n != 0 && n % 1000000 == 0) ? 3 : 4)));
		FormFunc: func(n int64) int {
			if n%10 == 1 && n%100 != 11 && n%100 != 71 && n%100 != 91 {
				return 0
			}
			if n%10 == 2 && n%100 != 12 && n%100 != 72 && n%100 != 92 {
				return 1
			}
			if ((n%10 == 3 || n%10 == 4) || n%10 == 9) && (n%100 < 10 || n%100 > 19) && (n%100 < 70 || n%100 > 79) && (n%100 < 90 || n%100 > 99) {
				return 2
			}
			if n != 0 && n%1000000 == 0 {
				return 3
			}
			return 4
		},
	}
}

// [ga]
func newRuleGa() *Rule {
	return &Rule{
		NPlurals: 5,
		// nplurals=5; plural=(n == 1) ? 0 : ((n == 2) ? 1 : ((n >= 3 && n <= 6) ? 2 : ((n >= 7 && n <= 10) ? 3 : 4)));
		FormFunc: func(n int64) int {
			if n == 1 {
				return 0
			}
			if n == 2 {
				return 1
			}
			if n >= 3 && n <= 6 {
				return 2
			}
			if n >= 7 && n <= 10 {
				return 3
			}
			return 4
		},
	}
}

// [mt]
func newRuleMt() *Rule {
	return &Rule{
		NPlurals: 5,
		// nplurals=5; plural=(n == 1) ? 0 : ((n == 2) ? 1 : ((n == 0 || n % 100 >= 3 && n % 100 <= 10) ? 2 : ((n % 100 >= 11 && n % 100 <= 19) ? 3 : 4)));
		FormFunc: func(n int64) int {
			if n == 1 {
				return 0
			}
			if n == 2 {
				return 1
			}
			if n == 0 || n%100 >= 3 && n%100 <= 10 {
				return 2
			}
			if n%100 >= 11 && n%100 <= 19 {
				return 3
			}
			return 4
		},
	}
}

// [ar ar_001 ars]
func newRuleArAr_001Ars() *Rule {
	return &Rule{
		NPlurals: 6,
		// nplurals=6; plural=(n == 0) ? 0 : ((n == 1) ? 1 : ((n == 2) ? 2 : ((n % 100 >= 3 && n % 100 <= 10) ? 3 : ((n % 100 >= 11 && n % 100 <= 99) ? 4 : 5))));
		FormFunc: func(n int64) int {
			if n == 0 {
				return 0
			}
			if n == 1 {
				return 1
			}
			if n == 2 {
				return 2
			}
			if n%100 >= 3 && n%100 <= 10 {
				return 3
			}
			if n%100 >= 11 && n%100 <= 99 {
				return 4
			}
			return 5
		},
	}
}

// [cy]
func newRuleCy() *Rule {
	return &Rule{
		NPlurals: 6,
		// nplurals=6; plural=(n == 0) ? 0 : ((n == 1) ? 1 : ((n == 2) ? 2 : ((n == 3) ? 3 : ((n == 6) ? 4 : 5))));
		FormFunc: func(n int64) int {
			if n == 0 {
				return 0
			}
			if n == 1 {
				return 1
			}
			if n == 2 {
				return 2
			}
			if n == 3 {
				return 3
			}
			if n == 6 {
				return 4
			}
			return 5
		},
	}
}

// [kw]
func newRuleKw() *Rule {
	return &Rule{
		NPlurals: 6,
		// nplurals=6; plural=(n == 0) ? 0 : ((n == 1) ? 1 : (((n % 100 == 2 || n % 100 == 22 || n % 100 == 42 || n % 100 == 62 || n % 100 == 82) || n % 1000 == 0 && (n % 100000 >= 1000 && n % 100000 <= 20000 || n % 100000 == 40000 || n % 100000 == 60000 || n % 100000 == 80000) || n != 0 && n % 1000000 == 100000) ? 2 : ((n % 100 == 3 || n % 100 == 23 || n % 100 == 43 || n % 100 == 63 || n % 100 == 83) ? 3 : ((n != 1 && (n % 100 == 1 || n % 100 == 21 || n % 100 == 41 || n % 100 == 61 || n % 100 == 81)) ? 4 : 5))));
		FormFunc: func(n int64) int {
			if n == 0 {
				return 0
			}
			if n == 1 {
				return 1
			}
			if (((n%100 == 2 || (n%100 == 22 || (n%100 == 42 || n%100 == 62))) || n%100 == 82) || n%1000 == 0 && ((n%100000 >= 1000 && n%100000 <= 20000 || (n%100000 == 40000 || n%100000 == 60000)) || n%100000 == 80000)) || n != 0 && n%1000000 == 100000 {
				return 2
			}
			if (n%100 == 3 || (n%100 == 23 || (n%100 == 43 || n%100 == 63))) || n%100 == 83 {
				return 3
			}
			if n != 1 && ((n%100 == 1 || (n%100 == 21 || (n%100 == 41 || n%100 == 61))) || n%100 == 81) {
				return 4
			}
			return 5
		},
	}
}
