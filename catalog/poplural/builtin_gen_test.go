// This file is generated by cldrplural/generator/main.go; DO NOT EDIT
package poplural

import (
	"fmt"
	"testing"

	"golang.org/x/text/language"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestBuiltinBmBoDzHnjIdIgIiJaJboJvJwKdeKeaKmKoLktLoMsMyNqoOsaSahSesSgSuThToTpiViWoYoYueZhZh_HansZh_Hant(t *testing.T) {
	for _, lang := range []string{"bm", "bo", "dz", "hnj", "id", "ig", "ii", "ja", "jbo", "jv", "jw", "kde", "kea", "km", "ko", "lkt", "lo", "ms", "my", "nqo", "osa", "sah", "ses", "sg", "su", "th", "to", "tpi", "vi", "wo", "yo", "yue", "zh", "zh_Hans", "zh_Hant"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "100", "1000", "10000", "100000", "1000000"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

	}
}

func TestBuiltinAfAnAsaAstAzBalBemBezBgBrxCeCggChrCkbDaDeDe_ATDe_CHDvEeElEnEn_AUEn_CAEn_GBEn_USEoEtEuFiFoFurFyGlGswHaHawHuIaIoJgoJmcKaKajKcgKkKkjKlKsKsbKuKyLbLgLijMasMgoMlMnMrNahNbNdNeNlNl_BENnNnhNoNrNyNynOmOrOsPapPsRmRofRwkSaqScScnSdSdhSehSnSoSqSsSsyStSvSwSw_CDSyrTaTeTeoTigTkTnTrTsUgUrUzVeVoVunWaeXhXogYi(t *testing.T) {
	for _, lang := range []string{"af", "an", "asa", "ast", "az", "bal", "bem", "bez", "bg", "brx", "ce", "cgg", "chr", "ckb", "da", "de", "de_AT", "de_CH", "dv", "ee", "el", "en", "en_AU", "en_CA", "en_GB", "en_US", "eo", "et", "eu", "fi", "fo", "fur", "fy", "gl", "gsw", "ha", "haw", "hu", "ia", "io", "jgo", "jmc", "ka", "kaj", "kcg", "kk", "kkj", "kl", "ks", "ksb", "ku", "ky", "lb", "lg", "lij", "mas", "mgo", "ml", "mn", "mr", "nah", "nb", "nd", "ne", "nl", "nl_BE", "nn", "nnh", "no", "nr", "ny", "nyn", "om", "or", "os", "pap", "ps", "rm", "rof", "rwk", "saq", "sc", "scn", "sd", "sdh", "seh", "sn", "so", "sq", "ss", "ssy", "st", "sv", "sw", "sw_CD", "syr", "ta", "te", "teo", "tig", "tk", "tn", "tr", "ts", "ug", "ur", "uz", "ve", "vo", "vun", "wae", "xh", "xog", "yi"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"1"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"0", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "100", "1000", "10000", "100000", "1000000"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

	}
}

func TestBuiltinAkAmAsBhoBnDoiFaFa_AFFfGuGuwHiHi_LatnHyKabKnLnMgNsoPaPcmSiTiWaZu(t *testing.T) {
	for _, lang := range []string{"ak", "am", "as", "bho", "bn", "doi", "fa", "fa_AF", "ff", "gu", "guw", "hi", "hi_Latn", "hy", "kab", "kn", "ln", "mg", "nso", "pa", "pcm", "si", "ti", "wa", "zu"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"0", "1"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "100", "1000", "10000", "100000", "1000000"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

	}
}

func TestBuiltinCebFilTl(t *testing.T) {
	for _, lang := range []string{"ceb", "fil", "tl"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"0", "1", "2", "3", "5", "7", "8", "10", "11", "12", "13", "15", "17", "18", "20", "21", "100", "1000", "10000", "100000", "1000000"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"4", "6", "9", "14", "16", "19", "24", "26", "104", "1004"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

	}
}

func TestBuiltinIsMk(t *testing.T) {
	for _, lang := range []string{"is", "mk"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"0", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "100", "1000", "10000", "100000", "1000000"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

	}
}

func TestBuiltinTzm(t *testing.T) {
	for _, lang := range []string{"tzm"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"0", "1", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"2", "3", "4", "5", "6", "7", "8", "9", "10", "100", "101", "102", "103", "104", "105", "106", "1000", "10000", "100000", "1000000"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

	}
}

func TestBuiltinBeBsHrRuShSrSr_MEUk(t *testing.T) {
	for _, lang := range []string{"be", "bs", "hr", "ru", "sh", "sr", "sr_ME", "uk"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"2", "3", "4", "22", "23", "24", "32", "33", "34", "42", "43", "44", "52", "53", "54", "62", "102", "1002"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

		for _, example := range []string{"0", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "100", "1000", "10000", "100000", "1000000"} {
			assert.Equal(t, 2, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 2", example))
		}

	}
}

func TestBuiltinCaEsEs_419Es_ESEs_MXItPt_PTVec(t *testing.T) {
	for _, lang := range []string{"ca", "es", "es_419", "es_ES", "es_MX", "it", "pt_PT", "vec"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"1"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"1000000", "1e6", "2e6", "3e6", "4e6", "5e6", "6e6"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

		for _, example := range []string{"0", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "100", "1000", "10000", "100000", "1e3", "2e3", "3e3", "4e3", "5e3", "6e3"} {
			assert.Equal(t, 2, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 2", example))
		}

	}
}

func TestBuiltinCsSk(t *testing.T) {
	for _, lang := range []string{"cs", "sk"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"1"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"2", "3", "4"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

		for _, example := range []string{"0", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "100", "1000", "10000", "100000", "1000000"} {
			assert.Equal(t, 2, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 2", example))
		}

	}
}

func TestBuiltinFrFr_CAFr_CHPtPt_BR(t *testing.T) {
	for _, lang := range []string{"fr", "fr_CA", "fr_CH", "pt", "pt_BR"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"0", "1"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"1000000", "1e6", "2e6", "3e6", "4e6", "5e6", "6e6"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

		for _, example := range []string{"2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "100", "1000", "10000", "100000", "1e3", "2e3", "3e3", "4e3", "5e3", "6e3"} {
			assert.Equal(t, 2, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 2", example))
		}

	}
}

func TestBuiltinHeIuNaqSatSeSmaSmiSmjSmnSms(t *testing.T) {
	for _, lang := range []string{"he", "iu", "naq", "sat", "se", "sma", "smi", "smj", "smn", "sms"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"1"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"2"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

		for _, example := range []string{"0", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "100", "1000", "10000", "100000", "1000000"} {
			assert.Equal(t, 2, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 2", example))
		}

	}
}

func TestBuiltinKshLag(t *testing.T) {
	for _, lang := range []string{"ksh", "lag"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"0"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"1"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

		for _, example := range []string{"2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "100", "1000", "10000", "100000", "1000000"} {
			assert.Equal(t, 2, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 2", example))
		}

	}
}

func TestBuiltinLt(t *testing.T) {
	for _, lang := range []string{"lt"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"2", "3", "4", "5", "6", "7", "8", "9", "22", "23", "24", "25", "26", "27", "28", "29", "102", "1002"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

		for _, example := range []string{"0", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "30", "40", "50", "60", "100", "1000", "10000", "100000", "1000000"} {
			assert.Equal(t, 2, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 2", example))
		}

	}
}

func TestBuiltinLvPrg(t *testing.T) {
	for _, lang := range []string{"lv", "prg"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"0", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "30", "40", "50", "60", "100", "1000", "10000", "100000", "1000000"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

		for _, example := range []string{"2", "3", "4", "5", "6", "7", "8", "9", "22", "23", "24", "25", "26", "27", "28", "29", "102", "1002"} {
			assert.Equal(t, 2, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 2", example))
		}

	}
}

func TestBuiltinMoRoRo_MD(t *testing.T) {
	for _, lang := range []string{"mo", "ro", "ro_MD"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"1"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"0", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "101", "1001"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

		for _, example := range []string{"20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "100", "1000", "10000", "100000", "1000000"} {
			assert.Equal(t, 2, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 2", example))
		}

	}
}

func TestBuiltinPl(t *testing.T) {
	for _, lang := range []string{"pl"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"1"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"2", "3", "4", "22", "23", "24", "32", "33", "34", "42", "43", "44", "52", "53", "54", "62", "102", "1002"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

		for _, example := range []string{"0", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "100", "1000", "10000", "100000", "1000000"} {
			assert.Equal(t, 2, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 2", example))
		}

	}
}

func TestBuiltinShi(t *testing.T) {
	for _, lang := range []string{"shi"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"0", "1"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"2", "3", "4", "5", "6", "7", "8", "9", "10"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

		for _, example := range []string{"11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "100", "1000", "10000", "100000", "1000000"} {
			assert.Equal(t, 2, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 2", example))
		}

	}
}

func TestBuiltinDsbHsbSl(t *testing.T) {
	for _, lang := range []string{"dsb", "hsb", "sl"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"1", "101", "201", "301", "401", "501", "601", "701", "1001"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"2", "102", "202", "302", "402", "502", "602", "702", "1002"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

		for _, example := range []string{"3", "4", "103", "104", "203", "204", "303", "304", "403", "404", "503", "504", "603", "604", "703", "704", "1003"} {
			assert.Equal(t, 2, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 2", example))
		}

		for _, example := range []string{"0", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "100", "1000", "10000", "100000", "1000000"} {
			assert.Equal(t, 3, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 3", example))
		}

	}
}

func TestBuiltinGd(t *testing.T) {
	for _, lang := range []string{"gd"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"1", "11"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"2", "12"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

		for _, example := range []string{"3", "4", "5", "6", "7", "8", "9", "10", "13", "14", "15", "16", "17", "18", "19"} {
			assert.Equal(t, 2, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 2", example))
		}

		for _, example := range []string{"0", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "100", "1000", "10000", "100000", "1000000"} {
			assert.Equal(t, 3, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 3", example))
		}

	}
}

func TestBuiltinGv(t *testing.T) {
	for _, lang := range []string{"gv"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"1", "11", "21", "31", "41", "51", "61", "71", "101", "1001"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"2", "12", "22", "32", "42", "52", "62", "72", "102", "1002"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

		for _, example := range []string{"0", "20", "40", "60", "80", "100", "120", "140", "1000", "10000", "100000", "1000000"} {
			assert.Equal(t, 2, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 2", example))
		}

		for _, example := range []string{"3", "4", "5", "6", "7", "8", "9", "10", "13", "14", "15", "16", "17", "18", "19", "23", "103", "1003"} {
			assert.Equal(t, 3, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 3", example))
		}

	}
}

func TestBuiltinBr(t *testing.T) {
	for _, lang := range []string{"br"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"1", "21", "31", "41", "51", "61", "81", "101", "1001"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"2", "22", "32", "42", "52", "62", "82", "102", "1002"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

		for _, example := range []string{"3", "4", "9", "23", "24", "29", "33", "34", "39", "43", "44", "49", "103", "1003"} {
			assert.Equal(t, 2, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 2", example))
		}

		for _, example := range []string{"1000000"} {
			assert.Equal(t, 3, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 3", example))
		}

		for _, example := range []string{"0", "5", "6", "7", "8", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "100", "1000", "10000", "100000"} {
			assert.Equal(t, 4, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 4", example))
		}

	}
}

func TestBuiltinGa(t *testing.T) {
	for _, lang := range []string{"ga"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"1"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"2"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

		for _, example := range []string{"3", "4", "5", "6"} {
			assert.Equal(t, 2, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 2", example))
		}

		for _, example := range []string{"7", "8", "9", "10"} {
			assert.Equal(t, 3, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 3", example))
		}

		for _, example := range []string{"0", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "100", "1000", "10000", "100000", "1000000"} {
			assert.Equal(t, 4, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 4", example))
		}

	}
}

func TestBuiltinMt(t *testing.T) {
	for _, lang := range []string{"mt"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"1"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"2"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

		for _, example := range []string{"0", "3", "4", "5", "6", "7", "8", "9", "10", "103", "104", "105", "106", "107", "108", "109", "1003"} {
			assert.Equal(t, 2, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 2", example))
		}

		for _, example := range []string{"11", "12", "13", "14", "15", "16", "17", "18", "19", "111", "112", "113", "114", "115", "116", "117", "1011"} {
			assert.Equal(t, 3, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 3", example))
		}

		for _, example := range []string{"20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "100", "1000", "10000", "100000", "1000000"} {
			assert.Equal(t, 4, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 4", example))
		}

	}
}

func TestBuiltinArAr_001Ars(t *testing.T) {
	for _, lang := range []string{"ar", "ar_001", "ars"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"0"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"1"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

		for _, example := range []string{"2"} {
			assert.Equal(t, 2, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 2", example))
		}

		for _, example := range []string{"3", "4", "5", "6", "7", "8", "9", "10", "103", "104", "105", "106", "107", "108", "109", "110", "1003"} {
			assert.Equal(t, 3, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 3", example))
		}

		for _, example := range []string{"11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "111", "1011"} {
			assert.Equal(t, 4, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 4", example))
		}

		for _, example := range []string{"100", "101", "102", "200", "201", "202", "300", "301", "302", "400", "401", "402", "500", "501", "502", "600", "1000", "10000", "100000", "1000000"} {
			assert.Equal(t, 5, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 5", example))
		}

	}
}

func TestBuiltinCy(t *testing.T) {
	for _, lang := range []string{"cy"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"0"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"1"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

		for _, example := range []string{"2"} {
			assert.Equal(t, 2, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 2", example))
		}

		for _, example := range []string{"3"} {
			assert.Equal(t, 3, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 3", example))
		}

		for _, example := range []string{"6"} {
			assert.Equal(t, 4, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 4", example))
		}

		for _, example := range []string{"4", "5", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "100", "1000", "10000", "100000", "1000000"} {
			assert.Equal(t, 5, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 5", example))
		}

	}
}

func TestBuiltinKw(t *testing.T) {
	for _, lang := range []string{"kw"} {
		form, found := langToBuiltIn[language.MustParse(lang).String()]
		require.True(t, found)

		for _, example := range []string{"0"} {
			assert.Equal(t, 0, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 0", example))
		}

		for _, example := range []string{"1"} {
			assert.Equal(t, 1, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 1", example))
		}

		for _, example := range []string{"2", "22", "42", "62", "82", "102", "122", "142", "1000", "10000", "100000"} {
			assert.Equal(t, 2, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 2", example))
		}

		for _, example := range []string{"3", "23", "43", "63", "83", "103", "123", "143", "1003"} {
			assert.Equal(t, 3, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 3", example))
		}

		for _, example := range []string{"21", "41", "61", "81", "101", "121", "141", "161", "1001"} {
			assert.Equal(t, 4, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 4", example))
		}

		for _, example := range []string{"4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "100", "1004", "1000000"} {
			assert.Equal(t, 5, form.Evaluate(example), fmt.Sprintf("form.Evaluate(%s) should be 5", example))
		}

	}
}
